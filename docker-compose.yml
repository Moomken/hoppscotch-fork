# Minimal "default" compose: AIO app + Postgres + one-shot migration
# No profiles used, so `docker compose up -d` (and Dokploy) just works.

services:
  hoppscotch-db:
    image: postgres:15
    container_name: hoppscotch-db
    ports:
      - "5432:5432"
    user: postgres
    environment:
      POSTGRES_USER: postgres
      # ⚠️ Change this in production
      POSTGRES_PASSWORD: testpass
      POSTGRES_DB: hoppscotch
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}'"]
      interval: 5s
      timeout: 5s
      retries: 10
    # Optional, but recommended: persist DB data (Dokploy-friendly path)
    # volumes:
    #   - ../files/postgres/:/var/lib/postgresql/data

  hoppscotch-aio:
    container_name: hoppscotch-aio
    restart: unless-stopped
    build:
      dockerfile: prod.Dockerfile
      context: .
      target: aio
    env_file:
      - ./.env
    depends_on:
      hoppscotch-db:
        condition: service_healthy
    ports:
      - "3080:80"     # web server
      - "3000:3000"   # app
      - "3100:3100"   # self-host admin
      - "3170:3170"   # backend
      - "3200:3200"   # webapp server

  hoppscotch-migrate:
    # one-shot container to apply DB migrations
    build:
      dockerfile: prod.Dockerfile
      context: .
      target: backend
    env_file:
      - ./.env
    depends_on:
      hoppscotch-db:
        condition: service_healthy
    command: sh -c "pnpx prisma migrate deploy"
